[Default]
Version = 7

Number of Inputs = 0
; Default Value = 0

Sanitize Input Value Check = false
; Default Value = True

Sanitize Output Value Check = false
; Default Value = True

String Datatype Check = false
; Default Value = True
; If Database Type is String adds Quotations around Text / VarChar DataTypes when retrieving Values
;	Note: This Doesn't Work for Text DataTypes for MySQL but with Poco
;		Important try to avoid this, will break whenever extDB updates to 1.6/1.7 Poco

Strip = true
;Enable / Disable Strip

Strip Chars = `/\|;{}<>'
; Can't Strip Char : since its used as a divider in extDB.
; If you need it stripped you will need todo it in SQF Code.
; 	Note: if value contains divider :
; 		It will result in extDB reading to many input values + will return an error anyway.

;	Important if you are using $INPUT_STRING_x, recommended you strip the char `
;		That is the quotation char used to wrap strings

Strip Chars Action = STRIP
; Actions   NONE / STRIP / STRIP+LOG / STRIP+ERROR
;	None
;	Strip  
; 	Strip + Add Logs to extDB Logs
;	Strip + Error, doesnt execute SQL, reports error back to server


;; [CALL_NAME] INFO

;; ---------------------------------------
;; ---------------------------------------
;; SQLx_y   x = SQL Statement Line   y = SQL Statement Line x  Part y
;;		This allows for to define multiple SQL Prepared Statements to run with a single callextension.


;; Number of Inputs is the number of total inputs. If inputs received doesnt match this number. SQL Statement wont run.

;; SQLx_INPUTS   is INPUTS to use for SQL Line x
;; OUPUT is same as SQLx_INPUTS

;; INPUT / OUTPUT Options
;; 			STRING  Removes " from VALUE + then add " to either end of VALUE i.e "VALUE"
;;			BEGUID	Converts Value to BEGUID
;;			CHECK	Sanitize Check
;;			NOCHECK
;;			STRIP   Strip Chars (overrides Default Setting)
;;			STRIP
;;			AltisLifeRPG_Array    Converts Array format to Altis Life RPG format, for legacy support

;; They are separated by comma ,
;; Options themselves are tokenized by -
;; 		So the Option 1-STRING-BEGUID  means INPUT VALUE 1 -> converted to BEGUID + quotes added  (order of tokens makes no difference)



[checkDBVersion]
SQL1_1 = SELECT CASE
SQL1_2 = 	WHEN EXISTS(SELECT * FROM DBInfo WHERE Name = 'Version' AND Value = '7') THEN 'true' ELSE 'false'
SQL1_3 = END

Strip = false

[getDBVersion]
SQL1_1 = SELECT Value FROM DBInfo WHERE NAME = 'Version';



;; Server Info
;;

[existServerInstance]
SQL1_1 = SELECT CASE
SQL1_2 = 	WHEN EXISTS(SELECT * FROM ServerInstance WHERE ID = ?) THEN 'true' ELSE 'false'
SQL1_3 = END

Number of Inputs = 1
SQL1_INPUTS = 1



[getMapID]
SQL1_1 = SELECT MapID FROM ServerInstance 
SQL1_2 = WHERE ID = ?;

Number of Inputs = 1
SQL1_INPUTS = 1




[getWarchestMoney]
SQL1_1 = SELECT WarchestMoneyBLUFOR, WarchestMoneyOPFOR FROM Server
SQL1_2 = WHERE ID = ?;

Number of Inputs = 1
SQL1_INPUTS = 1


[updateWarchestMoney]
SQL1_1 = UPDATE ServerInstance
SQL1_2 = 	Set WarchestMoneyBLUFOR = ?, WarchestMoneyOPFOR = ?
SQL1_3 = WHERE ID = ?;

Number of Inputs = 3
SQL1_INPUTS = 2, 3, 1




;; PLAYER INFO
;;

[existPlayerInfo]
SQL1_1 = SELECT CASE
SQL1_2 = 	WHEN EXISTS(SELECT * FROM PlayerInfo WHERE UID = ?) THEN 'true' ELSE 'false'
SQL1_3 = END

Number of Inputs = 1
SQL1_INPUTS = 1

[insertPlayerInfo+Save]
SQL1_1 = INSERT INTO PlayerInfo (UID, Name, BattlEyeGUID)
SQL1_2 = 	VALUES (?, ?, ?);
SQL2_1 = INSERT INTO PlayerSave 
SQL2_2 = 	(MapID, PlayerUID, CreationDate, LastModified) 
SQL2_3 = 		VALUES (?, ?, NOW(), NOW());

Number of Inputs = 3
SQL1_INPUTS = 2, 3-STRING, 2-BEGUID
SQL2_INPUTS = 1, 2


;; PLAYER SAVE
;;

[getPlayerSave]
SQL1_1 = SELECT 
SQL1_2 = 	Damage, HitPoints, Position, Direction, Hunger, Thirst, Money, CurrentWeapon, Stance, Headgear, Goggles, Uniform,  Vest, Backpack, UniformWeapons, UniformItems,
SQL1_3 = 	UniformMagazines, VestWeapons, VestItems, VestMagazines, BackpackWeapons, BackpackItems, BackpackMagazines, PrimaryWeapon, SecondaryWeapon, HandgunWeapon,
SQL1_4 = 	PrimaryWeaponItems, SecondaryWeaponItems, HandgunItems, AssignedItems, LoadedMagazines, wasteitems
SQL1_5 = FROM PlayerSave WHERE PlayerUID = ? and MapID = ?;

Number of Inputs = 2
SQL1_INPUTS = 2, 1

[updatePlayerSaveValue]
SQL1_1 = UPDATE PlayerSave
SQL1_2 = 	SET ? = ?
SQL1_3 = WHERE PlayerUID = ? AND MapID = ?;

Number of Inputs = 4
SQL1_INPUTS = 3, 4, 2, 1


[updatePlayerSaveValueString]
SQL1_1 = UPDATE PlayerSave
SQL1_2 = 	SET ? = ?
SQL1_3 = WHERE PlayerUID = ? AND MapID = ?;

Number of Inputs = 4
SQL1_INPUTS = 3, 4-STRING, 2, 1


[updatePlayerSaveAll]
SQL1_1 = UPDATE PlayerSave
SQL1_2 = 	SET Position=?, Direction=?, CurrentWeapon=?, Stance=?,
SQL1_3 = 		Damage=?, HitPoints=?, Hunger=?, Thirst=?, Money=?,
SQL1_4 = 		UniformWeapons=?, UniformItems=?, UniformMagazines=?, VestWeapons=?, VestItems=?,
SQL1_5 = 		VestMagazines=?, BackpackWeapons=?, BackpackItems=?, BackpackMagazines=?,
SQL1_6 =			Uniform=?, Vest=?, Backpack=?, Goggles=?, Headgear=?,
SQL1_7 =			PrimaryWeapon=?, SecondaryWeapon=?, HandgunWeapon=?,
SQL1_8 = 		PrimaryWeaponItems=?, SecondaryWeaponItems=?, HandgunItems=?,
SQL1_9 = 		AssignedItems=?, LoadedMagazines=?, wasteitems=?
SQL1_10 = WHERE PlayerUID=? AND MapID=?;

Number of Inputs = 34
SQL1_INPUTS = 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 2, 1


[replacePlayerSaveAll]
SQL1_1 = REPLACE PlayerSave
SQL1_2 = 	SET MapID=?, PlayerUID=?,
SQL1_3 = 		Position=?, Direction=?, CurrentWeapon=?, Stance=?,
SQL1_4 = 		Damage=?, HitPoints=?, Hunger=?, Thirst=?, Money=?,
SQL1_5 = 		UniformWeapons=?, UniformItems=?, UniformMagazines=?, VestWeapons=?, VestItems=?,
SQL1_6 = 		VestMagazines=?, BackpackWeapons=?, BackpackItems=?, BackpackMagazines=?,
SQL1_7 =			Uniform=?, Vest=?, Backpack=?, Goggles=?, Headgear=?,
SQL1_8 =			PrimaryWeapon=?, SecondaryWeapon=?, HandgunWeapon=?,
SQL1_9 = 		PrimaryWeaponItems=?, SecondaryWeaponItems=?, HandgunItems=?,
SQL1_10 = 		AssignedItems=?, LoadedMagazines=?, wasteitems=?;

Number of Inputs = 34

SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21-STRING, 22-STRING, 23-STRING, 24-STRING, 25-STRING, 26-STRING, 27-STRING, 28-STRING, 29, 30, 31, 32, 33, 34

[updatePlayerSaveDeath]
SQL1_1 = UPDATE PlayerSave
SQL1_2 = 	SET Damage=1
SQL1_3 = WHERE PlayerUID = ? AND MapID = ?;

Number of Inputs = 2

SQL1_INPUTS = 2, 1


;; ADMIN
;;
[addAdminLog]
SQL1_1 = INSERT INTO admin_log (value) VALUES (?);

Number of Inputs = 1

SQL1_INPUTS = 1


[insertAntihackLog]
SQL1_1 = INSERT INTO AntihackLog (Time, ServerID, uid, guid, name, hackType, hackValue)
SQL1_2 = 	VALUES (NOW(), ?, ?, ?, ?, ?, ?);

Number of Inputs = 5

SQL1_INPUTS = 1, 2, 2-BEGUID, 3-STRING, 4-STRING, 5-STRING
